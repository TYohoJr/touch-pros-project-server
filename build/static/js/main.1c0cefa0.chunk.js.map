{"version":3,"sources":["assets/logo-sm.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goToHome","bind","assertThisInitialized","goToWrestlers","goToAccomplishment","state","buttons","data","e","console","log","target","innerHTML","_this2","require","setState","Sports","map","item","i","react_default","a","createElement","Button","key","className","onClick","SportData","Title","toUpperCase","src","alt","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"minDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCInBC,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAChBA,EAAKU,cAAgBV,EAAKU,cAAcF,KAAnBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACrBA,EAAKW,mBAAqBX,EAAKW,mBAAmBH,KAAxBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC1BA,EAAKY,MAAQ,CACXC,QAAS,KACTC,KAAM,MAPId,wEAWLe,GACPC,QAAQC,IAAIF,EAAEG,OAAOC,iDAGTJ,GACZC,QAAQC,IAAIF,EAAEG,OAAOC,sDAGJJ,GACjBC,QAAQC,IAAIF,EAAEG,OAAOC,wDAIF,IAAAC,EAAAjB,KACfW,EAAOO,EAAQ,IACnBlB,KAAKmB,SAAS,CACZT,QAASC,EAAK,GAAGS,OAAOC,IAAI,SAACC,EAAMC,GACjC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAKL,EAAGM,UAAU,uBAAuBC,QAASb,EAAKT,oBAAqBc,EAAKS,UAAUC,MAAMC,iBAGlHtB,0CAKF,OACEa,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKQ,IAAKhB,EAAQ,IAAyBiB,IAAI,UAAUC,GAAG,YAC5DZ,EAAAC,EAAAC,cAAA,KAAGG,UAAU,OAAOO,GAAG,eAAvB,0BACAZ,EAAAC,EAAAC,cAAA,OAAKU,GAAG,kBACLpC,KAAKS,MAAMC,SAEdc,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOO,GAAG,0BACvBZ,EAAAC,EAAAC,cAAA,QAAMI,QAAS9B,KAAKI,UAApB,QACAoB,EAAAC,EAAAC,cAAA,QAAMU,GAAG,uBAAT,KACAZ,EAAAC,EAAAC,cAAA,QAAMI,QAAS9B,KAAKO,eAApB,cAEFiB,EAAAC,EAAAC,cAAA,OAAKU,GAAG,oBAAR,uCAlDuBC,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c0cefa0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-sm.e430251c.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from 'reactstrap';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.goToHome = this.goToHome.bind(this);\n    this.goToWrestlers = this.goToWrestlers.bind(this);\n    this.goToAccomplishment = this.goToAccomplishment.bind(this);\n    this.state = {\n      buttons: null,\n      data: null\n    }\n  }\n\n  goToHome(e) {\n    console.log(e.target.innerHTML);\n  }\n\n  goToWrestlers(e) {\n    console.log(e.target.innerHTML);\n  }\n\n  goToAccomplishment(e) {\n    console.log(e.target.innerHTML)\n  }\n\n  // Map the array of button titles from the local JOSN file into bootstrap buttons when the component mounts\n  componentWillMount() {\n    let data = require('./assets/1athletes.json');\n    this.setState({\n      buttons: data[0].Sports.map((item, i) => {\n        return <Button key={i} className='sport-data-title-btn' onClick={this.goToAccomplishment}>{item.SportData.Title.toUpperCase()}</Button>\n      }),\n      // Load the JSON object into the component state for faster access in case more API info is needed\n      data\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={require('./assets/logo-sm.png')} alt='logo-sm' id='logo-sm' />\n        <p className='text' id='header-text'>SELECT ACCOMPLISHMENT:</p>\n        <div id='btns-container'>\n          {this.state.buttons}\n        </div>\n        <footer>\n          <div className='text' id='footer-page-navigation'>\n            <span onClick={this.goToHome}>HOME</span>\n            <span id='footer-text-divider'>></span>\n            <span onClick={this.goToWrestlers}>WRESTLERS</span>\n          </div>\n          <div id='footer-touchpros'>TouchWall by TouchPros.com</div>\n        </footer>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}